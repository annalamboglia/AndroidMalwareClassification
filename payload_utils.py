# -*- coding: utf-8 -*-
"""cnn-androidmalware.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lADCfleSbXas8_RupsG7qveeEZrf-wEW
"""

import pandas as pd
import numpy as np
import os
import sys
import seaborn as sns
import matplotlib.pyplot as plt
import json
#from tqdm import tqdm

from scipy import stats
from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA


def byte_extraction(biflow_payload, bytes_number):
  '''
  Extracts the first M bytes of the payload and adds padding zeros
  '''
  # biflow_payload = str(biflow_payload)

  biflow_payload_len = len(biflow_payload)

  # print(type(biflow_payload))
  # print("---")
  # print(biflow_payload_len, biflow_payload)
  # print("---")

  if biflow_payload_len < bytes_number:
    add_0_padding = str("\x00" * (bytes_number - biflow_payload_len))

    biflow_payload.extend((add_0_padding))
    "".join(biflow_payload)
    # print(biflow_payload)
    # print(len(biflow_payload))

  elif biflow_payload_len > bytes_number:
    biflow_payload = biflow_payload[:bytes_number]

  # print(bytearray(biflow_payload, encoding='latin-1'))
  return biflow_payload


def decimal_conv(raw_payload):
  '''
  Perform decimal conversion of payload bytes (raw_payload is a string of Nb bytes)
  '''

  if raw_payload:
    for x in raw_payload:
      #i_payload = list((x.from_bytes(x, byteorder='big')))
      i_payload = list(bytearray(raw_payload.encode().decode(encoding='latin-1'), encoding='latin-1'))
  else:
    i_payload = []

  # print(i_payload)

  return i_payload


# Montieri porca madonna 

with open("./AdwareProvaFinale" + ".json", 'r') as fp:
    dizionario_adware = json.load(fp)
#      #print(dizionario_adware)
with open("./GeneralMalwareProvaFinale" + ".json", "r") as d:
    dizionario_GM = json.load(d)
    #print(dizionario_GM)
with open("./BenignProvaFinale" + ".json", "r") as d:
    dizionario_benign = json.load(d)
    
    #dizionario_benign = json.load(d, strict=False)
    #print(dizionario_benign)

dizionario_totale={}
dizionario_totale.update(dizionario_GM) 
dizionario_totale.update(dizionario_adware) 
dizionario_totale.update(dizionario_benign)


payload_decimal = {}
# lista_payload=[]
for sestupla in dizionario_totale.keys():
    print("key: {}".format(str(sestupla)))
    lista_payload = dizionario_totale[sestupla]["Feature"]['l4_payload']
    extracted = byte_extraction(lista_payload, 576)
    #listtest = [bytes(test, encoding='utf-8') for test in extracted]
    #print(extracted)
    stringa_test = ""
    for elem in extracted:
        stringa_test += elem
    list_conv_finale = decimal_conv(stringa_test)
    #print(list_conv_finale)
    payload_decimal[sestupla]=list_conv_finale

payload_dataframe = pd.DataFrame.from_dict(payload_decimal)
payload_dataframe.to_csv("payload.csv")

